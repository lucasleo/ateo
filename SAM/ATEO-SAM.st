Object subclass: #SAMControllerExperiment	instanceVariableNames: 'modelData instructions controllerNetwork'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMControllerExperiment methodsFor: 'as yet unclassified' stamp: 'CL 8/21/2009 17:50'!configureStep: currentStep	| currentMwi |		currentMwi := (currentStep at: 2) asInteger.		(currentMwi = 1)	ifTrue:[		modelData inputMwi1: 1.0.		modelData directSetPowerMWI1: 1.0.		modelData directSetPowerMWI2: 0.0.	].		(currentMwi = 2)	ifTrue:[modelData inputMwi1: 0.0.		modelData directSetPowerMWI1: 0.0.		modelData directSetPowerMWI2: 1.0.	].		(currentMwi = 12)	ifTrue:[modelData inputMwi1: 0.5.		modelData directSetPowerMWI1: 0.5.		modelData directSetPowerMWI2: 0.5.	].		modelData maxSpeed: 20.48;					denyLeft: false;					denyRight: false;					currentStep: (currentStep at: 1);					currentMwi: currentMwi;					currentTrackFile: (currentStep at: 3);					tickLog: OrderedCollection new;					dummy: 'dummy';					totalCalculatedXAxisForBlitter: -387;					trackEditMWIStaticObstacle: '0';					firstStaticObstacleXCoordinate: '0';					firstStaticObstacleYCoordinate: '0';					secondStaticObstacleXCoordinate: '0';					secondStaticObstacleYCoordinate: '0';						trackEditMWIDynamicObstacle: '0';					dynamicObstacleXCoordinate: '0';					dynamicObstacleYCoordinate: '0';					trackEditMWIFork: '0';					visualHint: 0;					auditiveHint: 0;					audHintAccuracy: '0';					audHintAllocation: 0;					audHintDirection: '0';					audHintPower: '0';					audHintSpeed: '0';					visHintDirection: '0';					visHintObstacle: '0';				 	visHintFork: '0';				 	visHintSpeed: '0';				 	visualHint: 0;					trackEditOADynamicObstacle: '0';					trackEditOAFork: '0';					trackEditOAStaticObstacle: '0';					directSetPowerMWI1: (modelData directSetPowerMWI1);					directSetPowerMWI2: (modelData directSetPowerMWI2);					directSetPowerReset: 0;					directSetDirection: 0;					directSetSpeed: 1;					directSetSpeedReset: 0;					speedometer: 0;					trackEnded: false;					blindClick: '0@0';					changed.! !!SAMControllerExperiment methodsFor: 'as yet unclassified' stamp: 'CL 8/20/2009 13:41'!initialize		"World on: #keyStroke send: #keyPressed: to: (SAMControllerKeyboard new)."		modelData := SAMModelData getInstance.		self loadExperimentConfiguration.	self loadTileNamesPerTrack .	"self loadGraphics ."	self loadLogTags.	self loadObstacleConfiguration .	self loadInstructions.		modelData experimentFolderName: (SAMControllerLog new) newExperimentFolder;				dynamicObstacleDistanceTick: 10.24;				changed .		instructions := (SAMViewInstructionInitial new) 							controller: self.	! !!SAMControllerExperiment methodsFor: 'as yet unclassified' stamp: 'CL 8/21/2009 10:15'!loadExperimentConfiguration	| fileStreaSteps line stepFile lineTokens |		fileStreaSteps := FileStream readOnlyFileNamed: 'trackConfig\steps.txt'.	stepFile := OrderedCollection new.		"reading steps.txt and putting it linewise in an OrderedCollection (steps)"	[fileStreaSteps atEnd]	whileFalse:	[		line := fileStreaSteps nextLine.		lineTokens := line findTokens: ';'.			((lineTokens size) > 0)		ifTrue:[			lineTokens do: [:token | lineTokens at: (lineTokens indexOf: token) put: token withBlanksTrimmed.].			stepFile add: lineTokens.		].	].	fileStreaSteps close.		modelData stepFile: stepFile; changed.! !!SAMControllerExperiment methodsFor: 'as yet unclassified' stamp: 'CL 8/4/2009 13:57'!loadGraphics	| tileNamesPerTrack nameSet trackGraphics progressBarValue|		trackGraphics := Dictionary new.	progressBarValue := 0.		tileNamesPerTrack := modelData tileNamesPerTrack .	nameSet := Set new.		"using a set, therefore no entry exists more than once"	tileNamesPerTrack do: 	[		:spiderJens |		spiderJens do: 		[			:miniSpiderJens | 			((miniSpiderJens = '111') | (miniSpiderJens = '1110') | (miniSpiderJens = '1111')) "these are the codes for the obstacles - only graphic names are needed"			ifFalse:[nameSet add: miniSpiderJens].		].			].	'Initial loading of all trackgraphics...' 		displayProgressAt: 0 @ 0		from: 0		to: nameSet size		during: 		[			:bar | 			nameSet do: 			[				:graphicFileName | 				progressBarValue := progressBarValue + 1.				bar value: progressBarValue.				trackGraphics at: graphicFileName put: (Form fromFileNamed: ('gfx\', graphicFileName)).			].		].		modelData trackGraphics: trackGraphics; changed. ! !!SAMControllerExperiment methodsFor: 'as yet unclassified' stamp: 'CL 8/21/2009 15:45'!loadInstructions	| stepInstructionsFile currentLine startInstructionsForSingleStep endInstructionsForSingleStep startInstructions endInstructions everyBodysFile |		startInstructions := Dictionary new.	endInstructions := Dictionary new.	startInstructionsForSingleStep := OrderedCollection new. "holds all startinstructions for a single step - can be more than one file"	endInstructionsForSingleStep := OrderedCollection new.	"holds all endinstructions for a single step - can be more than one file"	modelData stepFile do:	[		:stepFileEntry | 				stepInstructionsFile := FileStream readOnlyFileNamed: ('instructions\instructionsStep_', (stepFileEntry at: 1) asString, '.txt').							[stepInstructionsFile atEnd]		whileFalse:		[			currentLine := (stepInstructionsFile nextLine) withBlanksTrimmed.						(currentLine size > 1) "just in case some comedian inserts an empty line"			ifTrue:			[				everyBodysFile := FileStream readOnlyFileNamed: ('instructions\resources\', currentLine).							((currentLine at: 1) = $S)				ifTrue:				[										startInstructionsForSingleStep add: (everyBodysFile upToEnd ) withBlanksTrimmed.				].								((currentLine at: 1) = $E)				ifTrue:				[					endInstructionsForSingleStep add: (everyBodysFile upToEnd ) withBlanksTrimmed.				].			].				].				startInstructions at: (stepFileEntry at: 1) put: startInstructionsForSingleStep copy.		endInstructions at: (stepFileEntry at: 1) put: endInstructionsForSingleStep copy.		startInstructionsForSingleStep := nil.		startInstructionsForSingleStep := OrderedCollection new.		endInstructionsForSingleStep := nil.		endInstructionsForSingleStep := OrderedCollection new.	].	stepInstructionsFile close.	everyBodysFile close.	modelData startInstructions: startInstructions;			endInstructions: endInstructions;			changed.! !!SAMControllerExperiment methodsFor: 'as yet unclassified' stamp: 'nn 8/11/2009 09:28'!loadLogTags	| monkey |	monkey := OrderedCollection new.		monkey add: #('<TimeTotal>' '</TimeTotal>');			add: #('<TimeDelta>' '</TimeDelta>');			add: #('<XCoordinateOnSection>' '</XCoordinateOnSection>');			add: #('<YCoordinateOnSection>' '</YCoordinateOnSection>');			add: #('<ColorCode>' '</ColorCode>');			add: #('<DistanceTotal>' '</DistanceTotal>');			add: #('<DistanceTick>' '</DistanceTick>');						add: #('<LeftRightMWI1>' '</LeftRightMWI1>');			add: #('<LeftRightMWI2>' '</LeftRightMWI2>');			add: #('<UpDownMWI1>' '</UpDownMWI1>');			add: #('<UpDownMWI2>' '</UpDownMWI2>');						add: #('<NoSensorsOffTrack>' '</NoSensorsOffTrack>');			add: #('<CollisionAtSensor>' '</CollisionAtSensor>');			add: #('<FirstStaticObstacleXCoordinate>' '</FirstStaticObstacleXCoordinate>');			add: #('<FirstStaticObstacleYCoordinate>' '</FirstStaticObstacleYCoordinate>');			add: #('<SecondStaticObstacleXCoordinate>' '</SecondStaticObstacleXCoordinate>');			add: #('<SecondStaticObstacleYCoordinate>' '</SecondStaticObstacleYCoordinate>');			add: #('<DynamicObstacleXCoordinate>' '</DynamicObstacleXCoordinate>');			add: #('<DynamicObstacleYCoordinate>' '</DynamicObstacleYCoordinate>');			add: #('<DynamicObstacleDistanceTick>' '</DynamicObstacleDistanceTick>');			add: #('<TrackEditMWIVisibleStaticObstacle>' '</TrackEditMWIVisibleStaticObstacle>');			add: #('<TrackEditMWIVisibleDynamicObstacle>' '</TrackEditMWIVisibleDynamicObstacle>');			add: #('<TrackEditMWIVisibleFork>' '</TrackEditMWIVisibleFork>');			add: #('<TrackEditOAVisibleStaticObstacle>' '</TrackEditOAVisibleStaticObstacle>');			add: #('<TrackEditOAVisibleDynamicObstacle>' '</TrackEditOAVisibleDynamicObstacle>');			add: #('<TrackEditOAVisibleFork>' '</TrackEditOAVisibleFork>');			add: #('<AudHintAllocation>' '</AudHintAllocation>');			add: #('<AudHintSpeed>' '</AudHintSpeed>');			add: #('<AudHintDirection>' '</AudHintDirection>');			add: #('<AudHintAccuracy>' '</AudHintAccuracy>');			add: #('<AudHintPower>' '</AudHintPower>');			add: #('<DirectSetDirection>' '</DirectSetDirection>');			add: #('<DirectSetPowerMWI1>' '</DirectSetPowerMWI1>');			add: #('<DirectSetPowerMWI2>' '</DirectSetPowerMWI2>');			add: #('<DirectSetPowerReset>' '</DirectSetPowerReset>');			add: #('<DirectSetSpeed>' '</DirectSetSpeed>');			add: #('<DirectSetSpeedReset>' '</DirectSetSpeedReset>');			add: #('<VisHintObstacle>' '</VisHintObstacle>');			add: #('<VisHintFork>' '</VisHintFork>');			add: #('<VisHintSpeed>' '</VisHintSpeed>');			add: #('<VisHintDirection>' '</VisHintDirection>');			add: #('<BlindClick>' '</BlindClick>').				modelData logTags: monkey; changed.! !!SAMControllerExperiment methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 13:51'!loadObstacleConfiguration		| fileStreamSteps line lineTokens obstacleConfig dentaSnax dentaSnaxEntry|		obstacleConfig := Dictionary new.	dentaSnax := OrderedCollection new.	dentaSnaxEntry := Array new:2.		modelData stepFile do:	[		:drStruve | 						fileStreamSteps := FileStream readOnlyFileNamed: 'trackConfig\hindernisKonfiguration\', (drStruve at: 4).		1 to: dentaSnax size do: [:index | dentaSnax removeFirst.]. "emptying the current dictionary entry"			[fileStreamSteps atEnd]		whileFalse:		[			line := fileStreamSteps nextLine.			lineTokens := line findTokens: ';'.							dentaSnaxEntry at: 1 put: ((lineTokens at: 1) asInteger) . "what kind of obstacle: 111, 1110, 1111"			dentaSnaxEntry at: 2 put: ((lineTokens at: 2) asInteger) .	"at which position, a single number - the y coordinate"			dentaSnax add: (dentaSnaxEntry copy).				].			obstacleConfig at: (drStruve at: 1) put: (dentaSnax copy). 		fileStreamSteps close.	].			modelData obstacleConfig: obstacleConfig; changed.! !!SAMControllerExperiment methodsFor: 'as yet unclassified' stamp: 'CL 8/18/2009 10:52'!loadTileNamesPerTrack	| tileNamesPerTrack trackFile hamAndTurkey foo |		tileNamesPerTrack := Dictionary new.	"for each trackentry from steps - loading of all tilefilenames"	modelData stepFile do: 	[		:entry | 		"entry := entry findTokens: ';' ."		trackFile := FileStream readOnlyFileNamed: ('trackConfig\', (entry at: 3) asString, '.txt' "withBlanksTrimmed").		hamAndTurkey := OrderedCollection new.					[trackFile atEnd]		whileFalse:		[			foo := (((trackFile nextLine) findTokens: ';') at: 1) withBlanksTrimmed.						(foo size > 1)			ifTrue:			[				"((foo = '111') | (foo = '1110') | (foo = '1111'))				ifFalse:[hamAndTurkey add: foo.]."				hamAndTurkey add: foo.			].				].				tileNamesPerTrack at: ((entry at: 1) withBlanksTrimmed) put: hamAndTurkey.	].	trackFile close.		modelData tileNamesPerTrack: tileNamesPerTrack; changed.! !!SAMControllerExperiment methodsFor: 'as yet unclassified' stamp: 'HM 9/14/2009 14:01'!processExperiment	| controllerStep |		instructions delete.		controllerStep := (SAMControllerStep new) 								controllerNetwork: controllerNetwork.		(controllerStep track) controllerNetwork: controllerNetwork.		modelData stepFile do:	[		:currentStep |		self configureStep: currentStep.				(nil = (controllerStep processStep))			ifTrue: [				^self. "Break the loop."			].		"Transcript show: 'currentStep:', currentStep asString;cr. "	].! !!SAMControllerExperiment methodsFor: 'as yet unclassified' stamp: 'nn 8/10/2009 17:28'!showInitialInstruction	instructions comeToFront; show.! !!SAMControllerExperiment methodsFor: 'accessing' stamp: 'nn 8/11/2009 19:44'!controllerNetwork	^controllerNetwork! !!SAMControllerExperiment methodsFor: 'accessing' stamp: 'nn 8/11/2009 19:44'!controllerNetwork: anObject	controllerNetwork := anObject! !Object subclass: #SAMControllerInput	instanceVariableNames: 'modelData'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMControllerInput methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 22:48'!initialize	super initialize.		modelData := SAMModelData getInstance .! !!SAMControllerInput methodsFor: 'as yet unclassified' stamp: 'HM 9/14/2009 22:29'!processInputData	| maxSpeed joystick1 joystick1XAxis joystick1YAxis joystick2 joystick2XAxis joystick2YAxis threshold calculatedXAxis calculatedYAxis inputMwi1 inputMwi2 currentMwi totalCalculatedXAxisForBlitter |		(modelData directSetSpeed >= 0)	ifTrue:[maxSpeed := (modelData maxSpeed) * (modelData directSetSpeed).]	ifFalse:[maxSpeed := (modelData maxSpeed).].			threshold := 30.	inputMwi1 := modelData directSetPowerMWI1.	inputMwi2 := modelData directSetPowerMWI2.			"joystick 1" "Das verletzt das Proxy-Protokoll!!"	"joystick1 := Sensor joystickXY: 1."		joystick1XAxis := modelData joystick1XAxis asInteger.	joystick1YAxis := modelData joystick1YAxis asInteger.		(joystick1XAxis abs < threshold)	ifTrue: [joystick1XAxis := 0.].		(joystick1YAxis abs < threshold)	ifTrue: [joystick1YAxis := 0.].	"joystick 2"	"joystick2 := Sensor joystickXY: 2."		joystick2XAxis := modelData joystick2XAxis asInteger.	joystick2YAxis := modelData joystick2YAxis asInteger.		(joystick2XAxis abs < threshold)	ifTrue: [joystick2XAxis := 0.].		(joystick2YAxis abs < threshold)	ifTrue: [joystick2YAxis := 0.].		(modelData denyRight)	ifTrue: 	[		(joystick1XAxis > 0) ifTrue: [joystick1XAxis := 0].		(joystick2XAxis > 0) ifTrue: [joystick2XAxis := 0]	].		(modelData denyLeft)	ifTrue: 	[		(joystick1XAxis < 0) ifTrue: [joystick1XAxis := 0].		(joystick2XAxis < 0) ifTrue: [joystick2XAxis := 0]	].	calculatedXAxis := ((joystick1XAxis * inputMwi1) + (joystick2XAxis * inputMwi2) / 1.5 / 50.0) .		calculatedYAxis := (((1024 - joystick1YAxis * inputMwi1) + (1024 - joystick2YAxis * inputMwi2)) / 100.0).	(calculatedYAxis > maxSpeed) 	ifTrue:[calculatedYAxis := maxSpeed .].	modelData totalStepDistance: modelData totalStepDistance + calculatedYAxis.	modelData calculatedXAxis: calculatedXAxis.	modelData speedometer: (calculatedYAxis abs).	modelData calculatedYAxis: calculatedYAxis.		totalCalculatedXAxisForBlitter := modelData totalCalculatedXAxisForBlitter + (calculatedXAxis negated).	"making sure we are NOT leaving the track"	(totalCalculatedXAxisForBlitter between: -15 and: -753)	ifFalse:	[		(totalCalculatedXAxisForBlitter >= -15) ifTrue:[totalCalculatedXAxisForBlitter := -15.].		(totalCalculatedXAxisForBlitter <= -753) ifTrue:[totalCalculatedXAxisForBlitter := -753.].	].	modelData totalCalculatedXAxisForBlitter: totalCalculatedXAxisForBlitter.		currentMwi := modelData currentMwi.	((currentMwi = 1) | (currentMwi  = 12))	ifTrue:	[		modelData joystick1XAxis: joystick1XAxis asString.		modelData joystick1YAxis: joystick1YAxis asString.	]	ifFalse:	[		modelData joystick1XAxis: '0'.		modelData joystick1YAxis: '0'.	].		((currentMwi = 2) | (currentMwi  = 12))	ifTrue:	[		modelData joystick2XAxis: joystick2XAxis asString.		modelData joystick2YAxis: joystick2YAxis asString.	]	ifFalse:	[		modelData joystick2XAxis: '0'.		modelData joystick2YAxis: '0'.	].	modelData changed.! !!SAMControllerInput methodsFor: 'as yet unclassified' stamp: 'HM 9/14/2009 22:35'!updateJoystickPositions	| joy1Pos joy2Pos |		joy1Pos := Sensor joystickXY: 1.	joy2Pos := Sensor joystickXY: 2.		modelData joystick1XAxis: (joy1Pos x);	          joystick1YAxis: (joy1Pos y);	          joystick2XAxis: (joy2Pos x);	          joystick2YAxis: (joy2Pos y).! !Object subclass: #SAMControllerKeyboard	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMControllerKeyboard methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 11:06'!keyPressed: event	| refinedKeyCode | 	refinedKeyCode := event keyString.		(refinedKeyCode = '<Cmd-q>')	ifTrue:[Transcript show: 'quit'; cr.].		(refinedKeyCode = '<Cmd-e>')	ifTrue:[Transcript show: 'step überspringen'; cr.].		(refinedKeyCode = '<Cmd-r>')	ifTrue:[Transcript show: 'step reset'; cr.].		(refinedKeyCode = '<Cmd-a>')	ifTrue:[Transcript show: 'experiment reset'; cr.].		"Transcript show: refinedKeyCode; cr."! !Object subclass: #SAMControllerLog	instanceVariableNames: 'tickLog modelData'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMControllerLog methodsFor: 'as yet unclassified' stamp: 'CL 8/4/2009 10:53'!initialize	modelData := SAMModelData getInstance.! !!SAMControllerLog methodsFor: 'as yet unclassified' stamp: 'CL 8/6/2009 17:08'!newExperimentFolder	| date month day experimentFolderName timeNow hours minutes seconds |	date := Date today.	month := date monthIndex.	day := date dayOfMonth.		(day < 10)	ifTrue:[day := '0', day asString]	ifFalse:[day := day asString].	(month < 10)	ifTrue:[month := '0', month asString]	ifFalse:[month := month asString].		timeNow := Time now.		hours := timeNow hours.	minutes := timeNow minutes.	seconds := timeNow seconds.		(hours < 10)	ifTrue:[hours := '0', hours asString.]	ifFalse:[hours := hours asString.].		(minutes < 10)	ifTrue:[minutes := '0', minutes asString.]	ifFalse:[minutes := minutes asString.].		(seconds < 10)	ifTrue:[seconds := '0', seconds asString.]	ifFalse:[seconds := seconds asString.].	experimentFolderName := (date year) asString, month, day, '_', hours, minutes, seconds .		^experimentFolderName.		! !!SAMControllerLog methodsFor: 'as yet unclassified' stamp: 'CL 8/4/2009 14:12'!newExperimentStepFilename	| experimentStepFilename |		experimentStepFilename := modelData experimentFolderName, '_', (modelData currentStep) asString, '.xml'.		modelData experimentStepFilename: experimentStepFilename; changed.! !!SAMControllerLog methodsFor: 'as yet unclassified' stamp: 'CL 8/4/2009 13:55'!processStepLogData	| currentTimeStamp |	currentTimeStamp := Time millisecondClockValue.	modelData stepTotalTime: currentTimeStamp - modelData logStartTime;					timeDelta: currentTimeStamp - modelData timeLastStep;					timeLastStep: currentTimeStamp;					changed.! !!SAMControllerLog methodsFor: 'as yet unclassified' stamp: 'CL 8/21/2009 18:36'!writeStepLogFile	| logfile localTickLog progressBarValue refinedLogEntry logTags tags index tileNamesForThisTrack trackFileNames|	((FileDirectory default directoryNamed: 'log\', modelData experimentFolderName) exists)	ifFalse:[(FileDirectory new) createDirectory: 'log\', modelData experimentFolderName.].	logfile := (FileStream newFileNamed: ('log\', modelData experimentFolderName, '\', modelData experimentStepFilename)).		tileNamesForThisTrack := (modelData tileNamesPerTrack) at: modelData currentStep .	trackFileNames := ''.		tileNamesForThisTrack do: 	[		:oreo | 		((oreo = '111') | (oreo = '1110') | (oreo = '1111'))		ifFalse:[trackFileNames := trackFileNames, oreo, ';'.]	].		logfile nextPutAll: ('<experiment ExpNr = "' , (modelData experimentType) asString , 					'" TeamNr = "' , (modelData team) asString , 					'" SubjNr1 = "' , (modelData mwi1) asString , 					'" SubjNr2 = "' , (modelData mwi2) asString , 					'" AssistenceNo = "' , (modelData assistance ) asString , 					'" KindOfAssistance = "' , (modelData kindOfAssistance ) asString , 					'" TeamSex = "' , (modelData gender) asString , 					'" StepNr = "', (modelData currentStep) asString , 					'" ShareMWI1 = "', (modelData inputMwi1 ) asString ,					'" ShareMWI2 = "', (1 - (modelData inputMwi1)) asString ,					'" TrackFileNames = "', trackFileNames ,					'">',					(Character cr) asString).		localTickLog := modelData tickLog.	logTags := modelData logTags.	progressBarValue := 0.		'building logfile...' 		displayProgressAt: 0 @ 0		from: 0		to: localTickLog size		during: 		[			:bar | 			localTickLog do: 			[				:rawLogEntry | 				progressBarValue := progressBarValue + 1.				bar value: progressBarValue.								refinedLogEntry := '<Time>', (Character cr) asString.								"self halt."								rawLogEntry := rawLogEntry findTokens: ';'.				index := 1.								rawLogEntry do:				[					:singleEntry |					tags := (logTags at: index).					refinedLogEntry := refinedLogEntry, (tags at: 1), (singleEntry withBlanksTrimmed) , (tags at: 2), (Character cr) asString.					index := index + 1.				].								refinedLogEntry := refinedLogEntry, '</Time>', (Character cr) asString.				"self halt."				logfile nextPutAll: refinedLogEntry.			].		].		logfile nextPutAll: '</experiment>'.	logfile close.	! !!SAMControllerLog methodsFor: 'as yet unclassified' stamp: 'CL 8/21/2009 18:04'!writeTickLog	tickLog := modelData tickLog.		tickLog add: 		(modelData stepTotalTime) asString, 					';',	"TimeTotal"							(modelData timeDelta) asString, 							';',	"TimeDelta"							(modelData xCoordinateOnSection) asString, 			';',	"XCoordinateOnSection"							(modelData yCoordinateOnSection) asString, 			';',	"YCoordinateOnSection"							(modelData colorCode) asString, 							';',	"ColorCode"							(modelData totalStepDistance) asString, 				';', 	"DistanceTotal"							(modelData calculatedYAxis ) asString, 				';', 	"DistanceTick"							(modelData joystick1XAxis ) asString, 					';',	"LeftRightMWI1"							(modelData joystick2XAxis) asString, 					';',	"UpDownMWI1"							(modelData joystick1YAxis ) asString, 					';',	"LeftRightMWI2"							(modelData joystick2YAxis) asString, 					';',	"UpDownMWI2"											(modelData noSensorsOffTrack) asString, 				';',	"NoSensorsOffTrack"							(modelData collisionAtSensor) asString, 				';',	"CollisionAtSensor"							(modelData firstStaticObstacleXCoordinate ) , 		';',	"FirstStaticObstacleXCoordinate"							(modelData firstStaticObstacleYCoordinate ) , 		';',	"FirstStaticObstacleYCoordinate"							(modelData secondStaticObstacleXCoordinate ) , 		';',	"SecondStaticObstacleXCoordinate"							(modelData secondStaticObstacleYCoordinate ) , 		';',	"SecondStaticObstacleYCoordinate"							(modelData dynamicObstacleXCoordinate ) , 			';',	"DynamicObstacleXCoordinate"							(modelData dynamicObstacleYCoordinate ) , 			';',	"DynamicObstacleYCoordinate"							(modelData dynamicObstacleDistanceTick ) asString ,';',	"DynamicObstacleDistanceTick"							(modelData trackEditMWIStaticObstacle) , 				';',	"TrackEditMWIVisibleStaticObstacle"							(modelData trackEditMWIDynamicObstacle) ,';',		"TrackEditMWIVisibleDynamicObstacle"							(modelData trackEditMWIFork) , ';',					"TrackEditMWIVisibleFork"							(modelData trackEditOAStaticObstacle), ';',		"TrackEditOAVisibleStaticObstacle"							(modelData trackEditOADynamicObstacle ) , ';',		"TrackEditOAVisibleDynamicObstacle"							(modelData trackEditOAFork ) , ';',						"TrackEditOAVisibleFork"							(modelData audHintAllocation ) asString, ';',	"AudHintAllocation"							(modelData audHintSpeed ), ';',						"AudHintSpeed"							(modelData audHintDirection ) , ';',				"AudHintDirection"							(modelData audHintAccuracy ) , ';',					"AudHintAccuracy"							(modelData audHintPower ) , ';',						"AudHintPower"								(modelData directSetDirection ) asString, ';',	"DirectSetDirection"							(modelData directSetPowerMWI1 ) asString, ';',	"DirectSetPowerMWI1"							(modelData directSetPowerMWI2 ) asString, ';',	"DirectSetPowerMWI2"							(modelData directSetPowerReset  ) asString, ';',"DirectSetPowerReset"							(modelData directSetSpeed ) asString, ';',		"DirectSetSpeed"							(modelData directSetSpeedReset  ) asString, ';',"DirectSetSpeedReset"							(modelData visHintObstacle), ';',					"VisHintObstacle"							(modelData visHintFork), ';',							"VisHintFork"							(modelData visHintSpeed), ';',						"VisHintSpeed"							(modelData visHintDirection) asString, ';',		"VisHintDirection"							(modelData blindClick) asString. 					"BlindClick"								modelData tickLog: tickLog; changed.		! !Object subclass: #SAMControllerNetwork	instanceVariableNames: 'speedData coordData dynamicObstacleData joystickData trackData buttonActionData blindClicksData trackEditData modelData stepConfigData inspectWindow'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMControllerNetwork methodsFor: 'as yet unclassified' stamp: 'nn 8/26/2009 09:51'!closeSockets	joystickData closeAndDestroy.	speedData closeAndDestroy.	coordData closeAndDestroy.	trackData closeAndDestroy.	buttonActionData closeAndDestroy.	dynamicObstacleData closeAndDestroy.	blindClicksData closeAndDestroy .	trackEditData closeAndDestroy .	stepConfigData closeAndDestroy .	"	inspectWindow delete."! !!SAMControllerNetwork methodsFor: 'as yet unclassified' stamp: 'nn 8/26/2009 09:50'!createSockets	| hostName |	hostName := 'ATEO2'.		"UDP"	speedData 				:= Socket newUDP setPeer: (NetNameResolver addressForName: hostName) port: 40100.	coordData 				:= Socket newUDP setPeer: (NetNameResolver addressForName: hostName) port: 40200.	dynamicObstacleData 	:= Socket newUDP setPeer: (NetNameResolver addressForName: hostName) port: 40300.	joystickData 			:= Socket newUDP setPeer: (NetNameResolver addressForName: hostName) port: 40400.		"TCP"	stepConfigData 	:= Socket newTCP connectTo: (NetNameResolver addressForName: hostName) port: 60100.	trackData 			:= Socket newTCP connectTo: (NetNameResolver addressForName: hostName) port: 60200.	buttonActionData 	:= Socket newTCP connectTo: (NetNameResolver addressForName: hostName) port: 60300.	blindClicksData 	:= Socket newTCP connectTo: (NetNameResolver addressForName: hostName) port: 60400.	trackEditData 		:= Socket newTCP connectTo: (NetNameResolver addressForName: hostName) port: 60500.				self flushData .	"	inspectWindow := self inspect."! !!SAMControllerNetwork methodsFor: 'as yet unclassified' stamp: 'CL 8/21/2009 18:37'!flushData		buttonActionData receiveAvailableData .	blindClicksData receiveAvailableData .	trackEditData receiveAvailableData .! !!SAMControllerNetwork methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 21:46'!initialize	super initialize .		modelData := SAMModelData getInstance .! !!SAMControllerNetwork methodsFor: 'sendingData' stamp: 'CL 8/8/2009 21:41'!sendCoordData: data	coordData sendData: data! !!SAMControllerNetwork methodsFor: 'sendingData' stamp: 'CL 8/8/2009 21:41'!sendDynamicObstacleData: data	dynamicObstacleData sendData: data! !!SAMControllerNetwork methodsFor: 'sendingData' stamp: 'CL 8/9/2009 19:12'!sendJoystickData: data	joystickData sendData: data			! !!SAMControllerNetwork methodsFor: 'sendingData' stamp: 'CL 8/21/2009 09:23'!sendOPData	self sendSpeedData: (modelData totalStepDistance) asString, ';'.	self sendCoordData: ((modelData totalCalculatedXAxisForBlitter) negated) asString, ';'.			((modelData directSetPowerMWI1) = 0)	ifTrue:[		self sendJoystickData: ('0;0',';',(modelData joystick2XAxis),';',(modelData joystick2YAxis), ';').		].		((modelData directSetPowerMWI1) = 1)	ifTrue:[		self sendJoystickData: ((modelData joystick1XAxis),';',(modelData joystick1YAxis),';','0;0;').		].		(((modelData directSetPowerMWI1) > 0) & ((modelData directSetPowerMWI1) < 1))	ifTrue:[		self sendJoystickData: ((modelData joystick1XAxis),';',(modelData joystick1YAxis),';',(modelData joystick2XAxis),';',(modelData joystick2YAxis), ';').		].		! !!SAMControllerNetwork methodsFor: 'sendingData' stamp: 'CL 8/9/2009 19:11'!sendSpeedData: data	speedData sendData: data! !!SAMControllerNetwork methodsFor: 'sendingData' stamp: 'nn 8/11/2009 20:22'!sendStepConfigData: data	stepConfigData sendData: data! !!SAMControllerNetwork methodsFor: 'sendingData' stamp: 'CL 8/8/2009 21:41'!sendTrackData: data	trackData sendData: data! !!SAMControllerNetwork methodsFor: 'receivingData' stamp: 'CL 8/8/2009 23:04'!processNetwork	self receiveBlindClickData .	self receiveButtonDataFromOP .	self receiveTrackEditDataFromOP .! !!SAMControllerNetwork methodsFor: 'receivingData' stamp: 'CL 8/21/2009 17:51'!receiveBlindClickData	| networkData |	networkData := (blindClicksData receiveAvailableData) .				(networkData isNil)	ifFalse:	[		"Transcript show: '-- ', networkData, ' --' ; cr."		(networkData size > 0)		ifTrue:[			modelData blindClick: ((networkData findTokens: ';') last) asString.			modelData changed .		]		ifFalse:[			modelData blindClick: '0@0'.			modelData changed.			]			].! !!SAMControllerNetwork methodsFor: 'receivingData' stamp: 'CL 8/21/2009 17:59'!receiveButtonDataFromOP	| networkData directSetPowerMWI1 directSetPowerMWI2 directSetPowerReset directSetSpeedReset directSetSpeed|	networkData := (buttonActionData receiveAvailableData).		"resetting logdata"	modelData audHintAllocation: 0;				auditiveHint: 0;				visualHint:0;				directSetPowerReset: 0;				directSetSpeedReset: 0.				(networkData isNil)	ifFalse:	[		"(networkData size > 0)		ifTrue:[Transcript show: networkData ; cr.]."		networkData := networkData findTokens: ';'.			networkData do: 		[			:token | 			token := token asInteger.			"((token = 11) | (token = 12) | (token = 13))			ifTrue:[modelData audHintAllocation: (token \\ 10).]."						"((token >= 21) & (token <= 52))""AudHintSpeed - up(22) down(21) | AudHintDirection - left(31) right(32) | AudHintAccuracy - up(42) down(41) | AudHintPower - up(42) down(41)"			"ifTrue:[modelData auditiveHint: token.]."			(token >= 4000)			ifTrue:[modelData auditiveHint: token.].					(token > 60) & (token < 100) "VisHintObstacle - 69; VisHintFork - 79; VisHintSpeed - Up - 82; Down - 81: VisHintDirection - Left - 91; Right - 92"			ifTrue:[modelData visualHint: token].					((token >= 101) & (token <= 103)) "DirectSetDirection - Left"			ifTrue:[				(token = 101)				ifTrue:[					modelData denyLeft: true.					modelData denyRight: false.				].								(token = 102)				ifTrue:[					modelData denyRight: true.					modelData denyLeft: false.				].												(token = 103)				ifTrue:[					modelData denyLeft: false. 					modelData denyRight: false.				].								modelData directSetDirection: (token \\ 10).			].					(token >= 999) & (token < 2000) "DirectSetPowerMWI1 + DirectSetPowerMWI2 (this one is calculated)"			ifTrue:			[				(token = 999)				ifTrue:[					directSetPowerMWI1 := 0.5. 					directSetPowerMWI2 := 0.5.					directSetPowerReset := 1.					]				ifFalse:[					directSetPowerMWI1 := (token - 1000.0)/100.0.					directSetPowerMWI2 := 1.0 - directSetPowerMWI1.					directSetPowerReset := 0.					].								modelData directSetPowerMWI1: directSetPowerMWI1; 								directSetPowerMWI2: directSetPowerMWI2;								directSetPowerReset: directSetPowerReset. 			].					((token >= 2999) & (token < 4000)) "DirectSetSpeed"			ifTrue:[				(token = 2999)				ifTrue:[					directSetSpeed := 1.0.					directSetSpeedReset := 1.					]				ifFalse:[					directSetSpeed := (token - 3000) / 100.0.					directSetSpeedReset := 0.				].				modelData directSetSpeed: directSetSpeed;								directSetSpeedReset: directSetSpeedReset.			].		].	].	modelData changed .! !!SAMControllerNetwork methodsFor: 'receivingData' stamp: 'CL 8/21/2009 17:58'!receiveTrackEditDataFromOP	| networkData |		modelData trackEditOAFork: '0';					trackEditOAStaticObstacle: '0';					trackEditOADynamicObstacle: '0'.						networkData := trackEditData receiveAvailableData .				(networkData isNil)	ifFalse:	[		"Transcript show: '-- ', networkData, ' --' ; cr."		(networkData size > 0)		ifTrue:[			(networkData findTokens: ';') do: [				:token |				((token = '1_RLr') | (token = '1_ELl') | (token = '1_ELr') | (token = '1_RLl'))						ifTrue:[modelData trackEditOAFork: token.].								((token = '4_25lr') | (token = '4_50lr'))				ifTrue:[modelData trackEditOAStaticObstacle: token.].				(token = '3')				ifTrue:[modelData trackEditOADynamicObstacle: token.].			].		].	].	modelData changed.! !Object subclass: #SAMControllerOperator	instanceVariableNames: 'modelData timeStartShowing operator'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMControllerOperator methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 17:15'!initialize	super initialize.		modelData := SAMModelData getInstance .	operator := SAMViewOperator new.	timeStartShowing := 0.! !!SAMControllerOperator methodsFor: 'as yet unclassified' stamp: 'nn 8/11/2009 22:40'!processAuditiveHints	| auditiveHint audHintAllocation indexInSoundArray|		auditiveHint := (modelData auditiveHint - 4000) \\ 100.	audHintAllocation := modelData auditiveHint - 4000.		modelData auditiveHint: 0;					audHintAccuracy: '0';					audHintDirection: '0';					audHintPower: '0';					audHintSpeed: '0';					audHintAllocation: '0'.						(audHintAllocation >= 100) & (audHintAllocation <= 199)	ifTrue:[		modelData audHintAllocation: '1'. 		audHintAllocation := 1.		].						(audHintAllocation >= 200) & (audHintAllocation <= 299)	ifTrue:[		modelData audHintAllocation: '2'.		audHintAllocation := 2.		].		(audHintAllocation >= 300) & (audHintAllocation <= 399)	ifTrue:[		modelData audHintAllocation: '3'.		audHintAllocation := 3.		].		(auditiveHint ~= 0)	ifTrue:[				(auditiveHint = 21)		ifTrue:[			modelData audHintSpeed: (auditiveHint \\ 10) asString.			indexInSoundArray := 1.			].			(auditiveHint = 22)		ifTrue:[			modelData audHintSpeed: (auditiveHint \\ 10) asString.			indexInSoundArray := 2.			].			(auditiveHint = 31)		ifTrue:[			modelData audHintDirection: (auditiveHint \\ 10) asString.			indexInSoundArray := 3.			].			(auditiveHint = 32)		ifTrue:[			modelData audHintDirection: (auditiveHint \\ 10) asString.			indexInSoundArray := 4.			].			(auditiveHint = 41)		ifTrue:[			modelData audHintAccuracy: (auditiveHint \\ 10) asString.			indexInSoundArray := 5.			].			(auditiveHint = 42)		ifTrue:[			modelData audHintAccuracy: (auditiveHint \\ 10) asString.			indexInSoundArray := 6.			].			(auditiveHint = 51)		ifTrue:[			modelData audHintPower: (auditiveHint \\ 10) asString.			indexInSoundArray := 7.			].				(auditiveHint = 52)		ifTrue:[			modelData audHintPower: (auditiveHint \\ 10) asString.			indexInSoundArray := 8.			].		]. 		"Transcript show: 'auditiveHint: ', auditiveHint asString, ' audHintAllocation: ', audHintAllocation asString; cr."		((auditiveHint ~= 0) & (audHintAllocation ~= 0))	ifTrue:[		operator playAuditiveHints: indexInSoundArray withBalance: audHintAllocation.		].		modelData changed.! !!SAMControllerOperator methodsFor: 'as yet unclassified' stamp: 'CL 8/19/2009 15:08'!processVisualHints	| visualHint pathToForm |		visualHint := modelData visualHint .	"resetting the logging data"		modelData visHintDirection: '0';				 visHintObstacle: '0';				 visHintFork: '0';				 visHintSpeed: '0';				 visualHint: 0.		"prepare for logging and maybe later setting the correct sourceForms for blitting"	(visualHint ~= 0) 	ifTrue:[			(visualHint = 69) "VisHintObstacle"		ifTrue:[			modelData visHintObstacle: (visualHint \\ 10) asString.			pathToForm := 'gfx\Bild_Warnung Hindernis_90x90.png'.		].			(visualHint = 79) "VisHintFork"		ifTrue:[			modelData visHintFork: (visualHint \\ 10) asString.			pathToForm := 'gfx\Bild_Warnung Gabelung_90x90.png'.		].			(visualHint = 82) "VisHintSpeed - faster"		ifTrue:[			modelData visHintSpeed: (visualHint \\ 10) asString.			pathToForm := 'gfx\Bildo.bmp'.		].			(visualHint = 81) "VisHintSpeed - slower"		ifTrue:[			modelData visHintSpeed: (visualHint \\ 10) asString.			pathToForm := 'gfx\Bildu.bmp'.		].			(visualHint = 91) "VisHintDirection - left"		ifTrue:[			modelData visHintDirection: (visualHint \\ 10) asString.			pathToForm := 'gfx\Bildl.bmp'.		].			(visualHint = 92) "VisHintDirection - right"		ifTrue:[			modelData visHintDirection: (visualHint \\ 10) asString.			pathToForm := 'gfx\Bildr.bmp'.		].	].				"currently no hint is displayed and there is information to do so"	((timeStartShowing = 0) & (visualHint ~= 0)) 	ifTrue:[		operator visualHintForm: pathToForm.		timeStartShowing := Time millisecondClockValue .	]. "no connecting ifFalse!! because the following test on timeStartShowing can obviously changed in the ifTrue above"		(timeStartShowing = 0)	ifFalse:[		((Time millisecondClockValue - timeStartShowing) >= 1500) 		ifTrue:[timeStartShowing := 0.] "since showing the last hint, 1.5 seconds are gone by. its enough"		ifFalse:[operator showVisualHint.]. "timeStartShowing is ~= 0 - meaning that something should be shown"	].	modelData changed .! !Object subclass: #SAMControllerStep	instanceVariableNames: 'controllerObstacle controllerOperator controllerLog controllerInput modelData track trackingObject dynamicObstacleDistanceTickMeasurement dynamicObstacleDistanceTickCount speedMeasurement instructions controllerNetwork'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMControllerStep methodsFor: 'as yet unclassified' stamp: 'CL 8/9/2009 18:41'!controllerNetwork: someController		controllerNetwork := someController .! !!SAMControllerStep methodsFor: 'as yet unclassified' stamp: 'nn 8/11/2009 20:27'!initialize	modelData := SAMModelData getInstance .	controllerOperator := SAMControllerOperator new.	controllerLog := SAMControllerLog new.	controllerInput := SAMControllerInput new.	controllerOperator := SAMControllerOperator new.		track := (SAMViewTrack new).	trackingObject := SAMViewTrackingObject new.		dynamicObstacleDistanceTickMeasurement := 0.0.	dynamicObstacleDistanceTickCount := 0.0.	speedMeasurement := false.		instructions := SAMViewInstructionStep new.! !!SAMControllerStep methodsFor: 'as yet unclassified' stamp: 'HM 9/15/2009 00:20'!processStep		| currentTimeStamp startTimeTick endTimeTick deltaTime networkData tileNamesForThisStep |		(modelData network)	ifTrue:[		controllerNetwork sendStepConfigData: (modelData inputMwi1 ) asString.		networkData := ''.		tileNamesForThisStep := modelData tileNamesPerTrack at: (modelData currentStep).		tileNamesForThisStep do:[:item |			networkData := networkData, item, ';'.			].		controllerNetwork sendTrackData: networkData .		].		instructions instructionShown: true.	instructions startAndEndInstructions .		self showInstructions: 'start'.		controllerLog newExperimentStepFilename .	track buildTrack; showTrack .	track buildObstacles .	trackingObject buildTrackingObject; moveTrackingObject .				(Monitor new) critical: [track showCountdown .].		(modelData network)	ifTrue:[		controllerNetwork flushData.		].		currentTimeStamp := Time millisecondClockValue.	modelData totalStepDistance: 0.0;					logStartTime: currentTimeStamp;					timeLastStep: currentTimeStamp;					changed.		[modelData trackEnded]	whileFalse:	[		"Hack to make simulation interruptible. Or is there a clean quit message we could send instead?"		(Sensor anyButtonPressed)			ifTrue: [				^nil.			].				startTimeTick := Time millisecondClockValue .		(modelData network)		ifTrue:[controllerNetwork processNetwork.].				controllerInput updateJoystickPositions.		"AAF phase begins - after joystick (=input) updates, but before processing input."		(AAFProxy getInstance) readUpdatesFromSam: modelData.		(AAFControl getInstance) processGraphWithProxy: (AAFProxy getInstance).				"Updates modelData with AAF corrections *before* SAM continues its input processing."		(AAFProxy getInstance) writeUpdatesToSam: modelData.		"AAF phase ends."				"Updates modelData with current tracking state."		controllerInput processInputData.				track moveTrack. 		track moveObstacles .		trackingObject moveTrackingObject .		controllerOperator processVisualHints;									processAuditiveHints.		Display restore.				track processTrackEditMWI.			trackingObject processSensors.				(modelData collisionInTick) 		ifTrue:		[			(Delay forMilliseconds: 1000) wait.			trackingObject penaltyForCollision.			track deleteObstacle. 		].			"done?"		modelData xCoordinateOnSection: ((modelData totalCalculatedXAxisForBlitter) negated);					yCoordinateOnSection: (modelData totalStepDistance + 100.0) ;					changed. 		track colorCode .				(modelData colorCode = 80.8)		ifTrue:[modelData trackEnded: true; changed. track deleteTrack.].				(modelData colorCode = 43.9)		ifTrue:["Transcript show: 'start measuring'; cr."speedMeasurement := true.].				((modelData colorCode = 65.8) | (modelData colorCode = 1.0) | (modelData colorCode = 101.0) | (modelData colorCode = 102.0))		ifTrue:[modelData trackEditMWIFork: '1'.]		ifFalse:[modelData trackEditMWIFork: '0'.].				(speedMeasurement)		ifTrue:		[			dynamicObstacleDistanceTickMeasurement := dynamicObstacleDistanceTickMeasurement + modelData calculatedYAxis .			dynamicObstacleDistanceTickCount := dynamicObstacleDistanceTickCount + 1.0.		].				((modelData colorCode = 66.8) & (dynamicObstacleDistanceTickCount > 0.0))		ifTrue:		[			speedMeasurement := false.			modelData dynamicObstacleDistanceTick: dynamicObstacleDistanceTickMeasurement / dynamicObstacleDistanceTickCount.			dynamicObstacleDistanceTickMeasurement := 0.0.			dynamicObstacleDistanceTickCount := 0.0.		].				(modelData network)		ifTrue:[controllerNetwork sendOPData.].				(modelData collisionInTick)		ifFalse:		[			endTimeTick := Time millisecondClockValue .			deltaTime := endTimeTick - startTimeTick .			(deltaTime < 39.0)			ifTrue:[(Delay forMilliseconds: (39.0 - deltaTime )) wait.].			"Transcript show: 'deltaTime (actual computing time!!): ', deltaTime asString; cr."		].		controllerLog processStepLogData.		controllerLog writeTickLog .				].	instructions instructionShown: true.	self showInstructions: 'end'.		instructions instructionShown: true.		controllerLog writeStepLogFile.		! !!SAMControllerStep methodsFor: 'as yet unclassified' stamp: 'CL 8/9/2009 20:54'!showInstructions: wassup	(wassup = 'start')	ifTrue:[instructions showStartInstruction .]	ifFalse:[instructions showEndInstruction .].		[(Sensor redButtonPressed) & (Sensor mousePoint x between: 570 and: 625) & (Sensor mousePoint y between: 620 and: 645)]	whileFalse: 	[		"lalelu"	].		(Delay forMilliseconds: 50) wait.		(instructions instructionsEmpty: wassup)	ifFalse:[self showInstructions: wassup].	instructions hide.! !!SAMControllerStep methodsFor: 'accessing' stamp: 'nn 8/11/2009 20:29'!track	^track! !!SAMControllerStep methodsFor: 'accessing' stamp: 'nn 8/11/2009 20:29'!track: anObject	track := anObject! !Object subclass: #SAMModelData	instanceVariableNames: 'dummy stepFile tileNamesPerTrack trackGraphics logTags inputMwi1 maxSpeed denyLeft denyRight currentStep currentMwi currentTrackFile tickLog experimentFolderName experimentStepFilename stepTotalTime logStartTime timeDelta timeLastStep experimentType team mwi1 mwi2 assistance gender colorCode totalStepDistance calculatedYAxis joystick1XAxis joystick2XAxis joystick1YAxis joystick2YAxis noSensorsOffTrack yCoordinateTrackingObject trackEnded kindOfAssistance network calculatedXAxis collisionAtSensor collisionInTick speedometer totalCalculatedXAxisForBlitter trackHeight obstacleConfig dynamicObstacleDistanceTick startInstructions endInstructions trackEditMWIStaticObstacle trackEditMWIDynamicObstacle trackEditMWIFork dynamicObstacleXCoordinate dynamicObstacleYCoordinate secondStaticObstacleXCoordinate secondStaticObstacleYCoordinate firstStaticObstacleXCoordinate firstStaticObstacleYCoordinate xCoordinateOnSection yCoordinateOnSection visualHint visHintObstacle visHintFork visHintSpeed visHintDirection auditiveHint audHintSpeed audHintDirection audHintAccuracy audHintPower audHintAllocation directSetDirection directSetPowerMWI1 directSetPowerMWI2 directSetPowerReset directSetSpeed directSetSpeedReset blindClick trackEditOAStaticObstacle trackEditOADynamicObstacle trackEditOAFork'	classVariableNames: 'Current'	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 15:39'!assistance	^assistance! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 15:39'!assistance: anObject	assistance := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:23'!audHintAccuracy	^audHintAccuracy! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:23'!audHintAccuracy: anObject	audHintAccuracy := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:25'!audHintAllocation	^audHintAllocation! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:25'!audHintAllocation: anObject	audHintAllocation := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:23'!audHintDirection	^audHintDirection! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:23'!audHintDirection: anObject	audHintDirection := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:23'!audHintPower	^audHintPower! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:23'!audHintPower: anObject	audHintPower := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:23'!audHintSpeed	^audHintSpeed! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:23'!audHintSpeed: anObject	audHintSpeed := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:15'!auditiveHint	^auditiveHint! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 20:15'!auditiveHint: anObject	auditiveHint := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:21'!blindClick	^blindClick! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:21'!blindClick: anObject	blindClick := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:27'!calculatedXAxis	^calculatedXAxis! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:27'!calculatedXAxis: anObject	calculatedXAxis := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:07'!calculatedYAxis	^calculatedYAxis! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:07'!calculatedYAxis: anObject	calculatedYAxis := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:27'!collisionAtSensor	^collisionAtSensor! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:27'!collisionAtSensor: anObject	collisionAtSensor := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:27'!collisionInTick	^collisionInTick! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:27'!collisionInTick: anObject	collisionInTick := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:06'!colorCode	^colorCode! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:06'!colorCode: anObject	colorCode := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:49'!currentMwi	^currentMwi! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:49'!currentMwi: anObject	currentMwi := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:48'!currentStep	^currentStep! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:48'!currentStep: anObject	currentStep := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:50'!currentTrackFile	^currentTrackFile! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:50'!currentTrackFile: anObject	currentTrackFile := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:47'!denyLeft	^denyLeft! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:47'!denyLeft: anObject	denyLeft := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:47'!denyRight	^denyRight! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:47'!denyRight: anObject	denyRight := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:18'!directSetDirection	^directSetDirection! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:18'!directSetDirection: anObject	directSetDirection := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:18'!directSetPowerMWI1	^directSetPowerMWI1! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:18'!directSetPowerMWI1: anObject	directSetPowerMWI1 := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:18'!directSetPowerMWI2	^directSetPowerMWI2! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:18'!directSetPowerMWI2: anObject	directSetPowerMWI2 := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:18'!directSetPowerReset	^directSetPowerReset! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:18'!directSetPowerReset: anObject	directSetPowerReset := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:19'!directSetSpeed	^directSetSpeed! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:19'!directSetSpeed: anObject	directSetSpeed := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:19'!directSetSpeedReset	^directSetSpeedReset! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:19'!directSetSpeedReset: anObject	directSetSpeedReset := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:48'!dummy	^dummy! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:48'!dummy: anObject	dummy := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:51'!dynamicObstacleDistanceTick	^dynamicObstacleDistanceTick! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:51'!dynamicObstacleDistanceTick: anObject	dynamicObstacleDistanceTick := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:04'!dynamicObstacleXCoordinate	^dynamicObstacleXCoordinate! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:04'!dynamicObstacleXCoordinate: anObject	dynamicObstacleXCoordinate := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:04'!dynamicObstacleYCoordinate	^dynamicObstacleYCoordinate! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:04'!dynamicObstacleYCoordinate: anObject	dynamicObstacleYCoordinate := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/6/2009 16:56'!endInstructions	^endInstructions! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/6/2009 16:56'!endInstructions: anObject	endInstructions := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:54'!experimentFolderName	^experimentFolderName! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:54'!experimentFolderName: anObject	experimentFolderName := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:55'!experimentStepFilename	^experimentStepFilename! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:55'!experimentStepFilename: anObject	experimentStepFilename := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:01'!experimentType	^experimentType! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:01'!experimentType: anObject	experimentType := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:05'!firstStaticObstacleXCoordinate	^firstStaticObstacleXCoordinate! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:05'!firstStaticObstacleXCoordinate: anObject	firstStaticObstacleXCoordinate := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:05'!firstStaticObstacleYCoordinate	^firstStaticObstacleYCoordinate! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:05'!firstStaticObstacleYCoordinate: anObject	firstStaticObstacleYCoordinate := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:04'!gender	^gender! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:04'!gender: anObject	gender := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:54'!inputMwi1	^inputMwi1! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:31'!inputMwi1: anObject	inputMwi1 := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:08'!joystick1XAxis	^joystick1XAxis! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:08'!joystick1XAxis: anObject	joystick1XAxis := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:08'!joystick1YAxis	^joystick1YAxis! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:08'!joystick1YAxis: anObject	joystick1YAxis := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:08'!joystick2XAxis	^joystick2XAxis! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:08'!joystick2XAxis: anObject	joystick2XAxis := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:08'!joystick2YAxis	^joystick2YAxis! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:08'!joystick2YAxis: anObject	joystick2YAxis := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 15:47'!kindOfAssistance	^kindOfAssistance! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 15:47'!kindOfAssistance: anObject	kindOfAssistance := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:56'!logStartTime	^logStartTime! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:56'!logStartTime: anObject	logStartTime := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:26'!logTags	^logTags! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:26'!logTags: anObject	logTags := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:44'!maxSpeed	^maxSpeed! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:44'!maxSpeed: anObject	maxSpeed := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:02'!mwi1	^mwi1! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:02'!mwi1: anObject	mwi1 := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:02'!mwi2	^mwi2! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:02'!mwi2: anObject	mwi2 := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:27'!network	^network! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:27'!network: anObject	network := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:10'!noSensorsOffTrack	^noSensorsOffTrack! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:10'!noSensorsOffTrack: anObject	noSensorsOffTrack := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/6/2009 13:27'!obstacleConfig	^obstacleConfig! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/6/2009 13:27'!obstacleConfig: anObject	obstacleConfig := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:05'!secondStaticObstacleXCoordinate	^secondStaticObstacleXCoordinate! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:05'!secondStaticObstacleXCoordinate: anObject	secondStaticObstacleXCoordinate := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:05'!secondStaticObstacleYCoordinate	^secondStaticObstacleYCoordinate! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 13:05'!secondStaticObstacleYCoordinate: anObject	secondStaticObstacleYCoordinate := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 14:39'!speedometer	^speedometer! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 14:39'!speedometer: anObject	speedometer := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/6/2009 16:56'!startInstructions	^startInstructions! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/6/2009 16:56'!startInstructions: anObject	startInstructions := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:08'!stepFile	^stepFile! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:08'!stepFile: anObject	stepFile := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:56'!stepTotalTime	^stepTotalTime! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:56'!stepTotalTime: anObject	stepTotalTime := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:02'!team	^team! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:02'!team: anObject	team := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:51'!tickLog	^tickLog! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:51'!tickLog: anObject	tickLog := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:12'!tileNamesPerTrack	^tileNamesPerTrack! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:12'!tileNamesPerTrack: anObject	tileNamesPerTrack := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:57'!timeDelta	^timeDelta! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:57'!timeDelta: anObject	timeDelta := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:58'!timeLastStep	^timeLastStep! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:58'!timeLastStep: anObject	timeLastStep := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/5/2009 14:07'!totalCalculatedXAxisForBlitter	^totalCalculatedXAxisForBlitter! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/5/2009 14:07'!totalCalculatedXAxisForBlitter: anObject	totalCalculatedXAxisForBlitter := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:07'!totalStepDistance	^totalStepDistance! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:07'!totalStepDistance: anObject	totalStepDistance := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 12:23'!trackEditMWIDynamicObstacle	^trackEditMWIDynamicObstacle! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 12:23'!trackEditMWIDynamicObstacle: anObject	trackEditMWIDynamicObstacle := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 12:23'!trackEditMWIFork	^trackEditMWIFork! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 12:23'!trackEditMWIFork: anObject	trackEditMWIFork := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 12:23'!trackEditMWIStaticObstacle	^trackEditMWIStaticObstacle! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 12:23'!trackEditMWIStaticObstacle: anObject	trackEditMWIStaticObstacle := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:39'!trackEditOADynamicObstacle	^trackEditOADynamicObstacle! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:39'!trackEditOADynamicObstacle: anObject	trackEditOADynamicObstacle := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:39'!trackEditOAFork	^trackEditOAFork! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:40'!trackEditOAFork: anObject	trackEditOAFork := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:39'!trackEditOAStaticObstacle	^trackEditOAStaticObstacle! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 22:39'!trackEditOAStaticObstacle: anObject	trackEditOAStaticObstacle := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:23'!trackEnded	^trackEnded! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:23'!trackEnded: anObject	trackEnded := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:25'!trackGraphics	^trackGraphics! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 10:25'!trackGraphics: anObject	trackGraphics := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/6/2009 10:15'!trackHeight	^trackHeight! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/6/2009 10:15'!trackHeight: anObject	trackHeight := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 19:14'!visHintDirection	^visHintDirection! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 19:14'!visHintDirection: anObject	visHintDirection := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 19:14'!visHintFork	^visHintFork! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 19:14'!visHintFork: anObject	visHintFork := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 19:14'!visHintObstacle	^visHintObstacle! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 19:14'!visHintObstacle: anObject	visHintObstacle := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 19:14'!visHintSpeed	^visHintSpeed! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 19:14'!visHintSpeed: anObject	visHintSpeed := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 16:45'!visualHint	^visualHint! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 16:45'!visualHint: anObject	visualHint := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 15:58'!xCoordinateOnSection	^xCoordinateOnSection! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 15:58'!xCoordinateOnSection: anObject	xCoordinateOnSection := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 16:01'!yCoordinateOnSection	^yCoordinateOnSection! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/8/2009 16:01'!yCoordinateOnSection: anObject	yCoordinateOnSection := anObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:15'!yCoordinateTrackingObject	^yCoordinateTrackingObject! !!SAMModelData methodsFor: 'accessing' stamp: 'CL 8/4/2009 11:15'!yCoordinateTrackingObject: anObject	yCoordinateTrackingObject := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SAMModelData class	instanceVariableNames: ''!!SAMModelData class methodsFor: 'singleton' stamp: 'CL 8/4/2009 09:55'!getInstance	(Current isNil) 	ifTrue: [Current := self basicNew initialize]. 		^Current! !!SAMModelData class methodsFor: 'singleton' stamp: 'CL 8/4/2009 10:23'!new ^self error: 'Class ', self name, ' cannot create new instances. Try ', self name, ' current'.! !!SAMModelData class methodsFor: 'singleton' stamp: 'CL 8/4/2009 10:00'!reset	Current := nil.! !AlignmentMorph subclass: #SAMViewGuiConfig	instanceVariableNames: 'buttonSize label switchButtonSize seperationBar labelContainer team vpMWB1 vpMWB2 male female experimentType gender network networkButton modelData assistance humanAssistance machineAssistance kindOfAssistance controllerNetwork controllerExperiment'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 14:33'!actionSelectorGenderF	female borderColor: #inset; color: Color veryVeryLightGray.	male borderColor: #raised; color: (self groupColor).		gender := 'female'.! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 14:33'!actionSelectorGenderM	male borderColor: #inset; color: Color veryVeryLightGray.	female borderColor: #raised; color: (self groupColor).		gender := 'male'.! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 15:47'!actionSelectorHumanAssistance	humanAssistance borderColor: #inset; color: Color veryVeryLightGray.	machineAssistance borderColor: #raised; color: (self groupColor).		kindOfAssistance := 'Operateur'.! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 15:47'!actionSelectorMachineAssistance	humanAssistance borderColor: #raised; color: (self groupColor).	machineAssistance borderColor: #inset; color: Color veryVeryLightGray.		kindOfAssistance := 'Automatik'.! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/27/2009 14:01'!actionSelectorMinusExperimentType	((experimentType contents asInteger) > 1)	ifTrue:[experimentType contents: (((experimentType contents asInteger) - 1) asString).].! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 15:29'!actionSelectorMinusOperator	((assistance contents asInteger) > 1)	ifTrue:[assistance contents: (((assistance contents asInteger) - 1) asString).].! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 12:54'!actionSelectorMinusTeam	((team contents asInteger) > 1)	ifTrue:[team contents: (((team contents asInteger) - 1) asString).].! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 12:57'!actionSelectorMinusVpMWB1	((vpMWB1 contents asInteger) > 1)	ifTrue:[vpMWB1 contents: (((vpMWB1 contents asInteger) - 1) asString).].! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 12:57'!actionSelectorMinusVpMWB2	((vpMWB2 contents asInteger) > 1)	ifTrue:[vpMWB2 contents: (((vpMWB2 contents asInteger) - 1) asString).].! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'nn 8/10/2009 17:20'!actionSelectorNetwork: bool	network := bool.		(bool)	ifTrue:[controllerNetwork createSockets.]	ifFalse:[controllerNetwork closeSockets.].! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/27/2009 14:00'!actionSelectorPlusExperimentType	experimentType contents: (((experimentType contents asInteger) + 1) asString).! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 15:29'!actionSelectorPlusOperator	assistance contents: (((assistance contents asInteger) + 1) asString).! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 12:54'!actionSelectorPlusTeam	team contents: (((team contents asInteger) + 1) asString).! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 12:58'!actionSelectorPlusVpMWB1	vpMWB1 contents: (((vpMWB1 contents asInteger) + 1) asString).! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 12:58'!actionSelectorPlusVpMWB2	vpMWB2 contents: (((vpMWB2 contents asInteger) + 1) asString).! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'nn 8/26/2009 09:34'!actionSelectorStartExperiment	controllerExperiment := (SAMControllerExperiment new).	modelData assistance: (assistance contents asInteger); 			team: (team contents asInteger);			mwi1: (vpMWB1 contents asInteger);			mwi2: (vpMWB2 contents asInteger);			gender:  gender;			kindOfAssistance: kindOfAssistance;			network: network;			experimentType: (experimentType contents asInteger);			changed .				self hide.		 controllerExperiment controllerNetwork: controllerNetwork;										showInitialInstruction.		! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 4/22/2009 11:39'!buttonSize	^buttonSize! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 12:59'!createAlignmentMorph: thisExtent	^AlignmentMorph new		color: Color transparent ;			listDirection: #leftToRight;		borderColor: Color blue;		borderWidth: 0;		wrapCentering: #center;		extent: thisExtent ;		vResizing: #rigid;		hResizing: #rigid;		layoutInset: 0;		useRoundedCorners .! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'nn 8/10/2009 17:31'!createGuiElements	| assistanceContainer groupContainer teamContainer vpMWB1Container vpMWB2Container genderContainer inputContainer networkContainer startContainer |	"Operator"	assistance := self createStringMorph: '1'.		assistanceContainer := (self createAlignmentMorph: 300@50) 									addMorphBack: (self createSimpleButton: '-' withActionSelector: #actionSelectorMinusOperator);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: ((self createAlignmentMorph: 20@30) listCentering: #center; addMorphBack: assistance);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createSimpleButton: '+' withActionSelector: #actionSelectorPlusOperator);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createStringMorph: 'Assistenz').										"Versuchsbedingung"	experimentType := self createStringMorph: '1'.		groupContainer := (self createAlignmentMorph: 300@50) 									addMorphBack: (self createSimpleButton: '-' withActionSelector: #actionSelectorMinusExperimentType);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: ((self createAlignmentMorph: 20@30) listCentering: #center; addMorphBack: experimentType);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createSimpleButton: '+' withActionSelector: #actionSelectorPlusExperimentType);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createStringMorph: 'Versuchsbedingung').																				"Teamnummer"	team := self createStringMorph: '1'.		teamContainer := (self createAlignmentMorph: 300@50) 									addMorphBack: (self createSimpleButton: '-' withActionSelector: #actionSelectorMinusTeam);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: ((self createAlignmentMorph: 20@30) listCentering: #center; addMorphBack: team);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createSimpleButton: '+' withActionSelector: #actionSelectorPlusTeam);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createStringMorph: 'Teamnummer').										"vpMWB1"	vpMWB1 := self createStringMorph: '1'.		vpMWB1Container := (self createAlignmentMorph: 300@50) 									addMorphBack: (self createSimpleButton: '-' withActionSelector: #actionSelectorMinusVpMWB1);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: ((self createAlignmentMorph: 20@30) listCentering: #center; addMorphBack: vpMWB1);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createSimpleButton: '+' withActionSelector: #actionSelectorPlusVpMWB1);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createStringMorph: 'vpMWB1').												"vpMWB2"	vpMWB2 := self createStringMorph: '1'.		vpMWB2Container := (self createAlignmentMorph: 300@50) 									addMorphBack: (self createSimpleButton: '-' withActionSelector: #actionSelectorMinusVpMWB2);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: ((self createAlignmentMorph: 20@30) listCentering: #center; addMorphBack: vpMWB2);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createSimpleButton: '+' withActionSelector: #actionSelectorPlusVpMWB2);									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createStringMorph: 'vpMWB2').																					"Geschlecht"		male := (self createSimpleButton: 'Männlich' withActionSelector: #actionSelectorGenderM) borderColor: #inset; color: Color veryVeryLightGray; extent: 100@35.	female := (self createSimpleButton: 'Weiblich' withActionSelector: #actionSelectorGenderF) extent: 100@35.		genderContainer := (self createAlignmentMorph: 300@50)									addMorphBack: male;									addMorphBack: female;									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createStringMorph: 'Geschlecht').																"Eingabe"																															humanAssistance := (self createSimpleButton: 'Operateur' withActionSelector: #actionSelectorHumanAssistance) borderColor: #inset; color: Color veryVeryLightGray; extent: 100@35.	machineAssistance := (self createSimpleButton: 'Automatik' withActionSelector: #actionSelectorMachineAssistance) extent: 100@35.		inputContainer := (self createAlignmentMorph: 300@50)									addMorphBack: humanAssistance;									addMorphBack: machineAssistance;									addMorphBack: (self createAlignmentMorph: 10@5);									addMorphBack: (self createStringMorph: 'Assistenz').														"Netzwerk"	networkButton := (self createSwitchButton: 'Netzwerk' withActionSelector: #actionSelectorNetwork:).												networkContainer := (self createAlignmentMorph: 300@50)									addMorphBack: networkButton.										"Versuch starten"	startContainer := (self createAlignmentMorph: 300@70) addMorphBack: ((self createSimpleButton: 'Versuch starten' withActionSelector: #actionSelectorStartExperiment) extent: 300@35).													self 	addMorphBack: groupContainer;			addMorphBack: teamContainer;			addMorphBack: vpMWB1Container;			addMorphBack: vpMWB2Container;			addMorphBack: assistanceContainer;			addMorphBack: inputContainer;			addMorphBack: genderContainer;			addMorphBack: networkContainer;			addMorphBack: startContainer;			setWindwoSize: 400@550.! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 12:24'!createIconicButton: aFile withActionSelector: aSelector 	^IconicButton new		target: self;		labelGraphic: ((Form fromFileNamed: aFile) replaceColor: Color white withColor: Color transparent );		actionSelector: aSelector;		borderColor: #raised;		borderWidth: 4;		extent: 100@100;		"recolor: Color veryVeryLightGray;"		color: (self groupColor );		useRoundedCorners .! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 12:40'!createSimpleButton: buttonLabel withActionSelector: foo 	"in buttonBag all the created buttons are stored for later manipulation"	^SimpleButtonMorph new				color: (self groupColor);				borderColor: #raised;				borderWidth: 2;				label: buttonLabel;				extent: 25@25;				target: self;				actionSelector: foo.! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 5/29/2009 16:38'!createStringMorph: buttonLabel ^(StringMorph new) contents: buttonLabel; fontName: #BitstreamVeraSans size: 16.! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 7/18/2009 13:30'!createSwitchButton: buttonLabel withActionSelector: foo 	^SimpleSwitchMorph new				onColor: (Color green mixed: 0.5 with: Color white);				offColor: (Color red mixed: 0.5 with: Color white);				color: (Color green mixed: 0.5 with: Color white);				borderColor: #inset;				borderWidth: 2;				label: buttonLabel;				extent: 100@35;				target: self;				setSwitchState: false;				actionSelector: foo.! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 5/27/2009 16:27'!groupColor	^(Color gray mixed: 0.14 with: Color white)! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 8/20/2009 13:41'!initialize	| sepaerationBarContainer |	super initialize.		SmalltalkImage current vmParameterAt: 5 put: 400000.	SmalltalkImage current vmParameterAt: 6 put: 12000.		SAMModelData reset.	modelData:= SAMModelData getInstance .	controllerNetwork := SAMControllerNetwork new.			gender := 'male'.	kindOfAssistance := 'Operateur'.	network := false.	self		color: Color veryVeryLightGray;		height:190;		width: 350;		borderWidth: 2;		layoutInset: 0;		listDirection: #topToBottom;		wrapCentering: #center;		cellPositioning: #topCenter;		cornerStyle: #rounded;		position: 80 @ 50.	labelContainer := (AlignmentMorph new)				listDirection: #topToBottom;				height: 40;				width: self width - (self borderWidth * 2);				borderWidth: 0;				cellPositioning: #center;				listCentering: #center;				wrapCentering: #center;				vResizing: #rigid;				hResizing: #rigid;				borderColor: Color yellow;				color: Color transparent;				layoutInset: 0.	label := (StringMorph new)				contents: 'SAM Konfiguration';				fontName: #BitstreamVeraSans size: 32.	sepaerationBarContainer := (AlignmentMorph new)				listDirection: #topToBottom;				height: 20;				width: self width - (self borderWidth * 2);				borderWidth: 0;				cellPositioning: #top;				listCentering: #center;				wrapCentering: #center;				vResizing: #rigid;				hResizing: #rigid;				borderColor: Color yellow;				color: Color transparent;				layoutInset: 0.		seperationBar := RectangleMorph new color: Color black; extent: self width - (self borderWidth * 2)@2; borderWidth: 0; borderColor: Color blue .	sepaerationBarContainer addMorphBack: seperationBar.		self addMorphBack: (labelContainer addMorphBack: label); 			addMorphBack: sepaerationBarContainer;			createGuiElements;			openInWorld.						! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 4/22/2009 11:40'!label: foo 	label contents: foo! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 5/28/2009 16:24'!setWindwoSize: newSize	self extent: newSize.	seperationBar extent: self width - (self borderWidth * 2)@2.	labelContainer width: self width - (self borderWidth * 2).! !!SAMViewGuiConfig methodsFor: 'as yet unclassified' stamp: 'CL 4/22/2009 13:00'!switchButtonSize	^switchButtonSize! !!SAMViewGuiConfig methodsFor: 'accessing' stamp: 'nn 8/10/2009 17:21'!controllerNetwork	^controllerNetwork! !!SAMViewGuiConfig methodsFor: 'accessing' stamp: 'nn 8/10/2009 17:21'!controllerNetwork: anObject	controllerNetwork := anObject! !RectangleMorph subclass: #SAMViewInstructionInitial	instanceVariableNames: 'controller'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMViewInstructionInitial methodsFor: 'as yet unclassified' stamp: 'CL 8/7/2009 15:24'!actionSelectorInitialInstruction	controller processExperiment.	! !!SAMViewInstructionInitial methodsFor: 'as yet unclassified' stamp: 'CL 8/7/2009 15:22'!initialize	super initialize.			self color: Color white;			borderColor: Color white;			borderWidth: 40;			position: 75 @ 50;			extent: 600 @ 600;			addMorph: ((IconicButton new)									target: self;									labelGraphic: (Form fromFileNamed: 'gfx\Teaminstruktion1.png');									actionSelector: #actionSelectorInitialInstruction;									borderColor: #raised;									borderWidth: 5;									extent: 130 @ 100;									recolor: Color lightGray;									position: 145 @ 125);					addMorph: ((IconicButton new)									target: self;									labelGraphic: (Form fromFileNamed: 'gfx\Teaminstruktion2.png');									actionSelector: #actionSelectorInitialInstruction;									borderColor: #raised;									borderWidth: 5;									extent: 130 @ 100;									recolor: Color lightGray;									position: 450 @ 125);					addMorph: ((IconicButton new)									target: self;									labelGraphic: (Form fromFileNamed: 'gfx\Teaminstruktion3.png');									actionSelector: #actionSelectorInitialInstruction;									borderColor: #raised;									borderWidth: 5;									extent: 130 @ 100;									recolor: Color lightGray;									position: 300 @ 300);					addMorph: ((IconicButton new)									target: self;									labelGraphic: (Form fromFileNamed: 'gfx\Teaminstruktion4.png');									actionSelector: #actionSelectorInitialInstruction;									borderColor: #raised;									borderWidth: 5;									extent: 130 @ 100;									recolor: Color lightGray;									position: 145 @ 475);					addMorph: ((IconicButton new)									target: self;									labelGraphic: (Form fromFileNamed: 'gfx\Teaminstruktion5.png');									actionSelector: #actionSelectorInitialInstruction;									borderColor: #raised;									borderWidth: 5;									extent: 130 @ 100;									recolor: Color lightGray;									position: 450 @ 475);				openInWorld;				hide.! !!SAMViewInstructionInitial methodsFor: 'accessing' stamp: 'CL 8/7/2009 15:17'!controller	^controller! !!SAMViewInstructionInitial methodsFor: 'accessing' stamp: 'CL 8/7/2009 15:17'!controller: anObject	controller := anObject! !RectangleMorph subclass: #SAMViewInstructionStep	instanceVariableNames: 'modelData startInstructions endInstructions instructionShown'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMViewInstructionStep methodsFor: 'as yet unclassified' stamp: 'CL 8/9/2009 20:26'!initialize	super initialize.			self color: Color white;			borderColor: Color white;			borderWidth: 40;			position: 75 @ 50;			extent: 600 @ 600;			openInWorld;			hide.				modelData := SAMModelData getInstance .	instructionShown := true.! !!SAMViewInstructionStep methodsFor: 'as yet unclassified' stamp: 'CL 8/7/2009 16:16'!instructionsEmpty: mode	(mode = 'start')	ifTrue:[^(startInstructions isEmpty).]	ifFalse:[^(endInstructions isEmpty).].! !!SAMViewInstructionStep methodsFor: 'as yet unclassified' stamp: 'CL 8/7/2009 16:15'!showEndInstruction	self stepInstruction: endInstructions .! !!SAMViewInstructionStep methodsFor: 'as yet unclassified' stamp: 'CL 8/7/2009 16:39'!showStartInstruction	self stepInstruction: startInstructions .! !!SAMViewInstructionStep methodsFor: 'as yet unclassified' stamp: 'CL 8/9/2009 20:26'!startAndEndInstructions	startInstructions := (modelData startInstructions) at: (modelData currentStep).	endInstructions := (modelData endInstructions) at: (modelData currentStep).! !!SAMViewInstructionStep methodsFor: 'as yet unclassified' stamp: 'CL 8/21/2009 15:45'!stepInstruction: instructions	| drKnalltuete drKnalltuetenContainer |		"(instructionShown) 	ifTrue:	["		self submorphs do: [:sub | sub delete.].			self addMorph: ((PluggableTextMorph new)							setText: (instructions first) withCRs ;							font: (StrikeFont familyName: 'Accujen' size: 18 emphasized: 1);							position: (self position + (30 @ 30));							extent: ((self width - 30) @ self height - 60);							borderColor: Color transparent						);			addMorph: ((SimpleButtonMorph new)						label: 'Weiter';						color: Color green;						target: self;						actionSelector: #actionSelectorStepInstruction;						extent: 55@25;						position: 570 @ 620).				(((modelData currentStep) asInteger = 2) & ((instructions first) asString = 'Ihr Team waehlte folgende Instruktion:'))		ifTrue: 		[			"Transcript show: 'if 1';cr."			drKnalltuete := (ImageMorph new 						image: (Form fromFileNamed: 'gfx\Schnelligkeitsinstruktion.png')).			drKnalltuetenContainer := (AlignmentMorph inAColumn: {drKnalltuete})				extent: 220 @ 160;				position: 270 @ 260;				color: Color lightGray;				borderWidth: 0.			self addMorph: drKnalltuetenContainer.		].			(((modelData currentStep) asInteger = 4)  & ((instructions first) asString = 'Ihr Team waehlte folgende Instruktion:'))		ifTrue: 			[				drKnalltuete := (ImageMorph new 						image: (Form fromFileNamed: 'gfx\Genauigkeitsinstruktion.png')).			drKnalltuetenContainer := (AlignmentMorph inAColumn: {drKnalltuete})				extent: 220 @ 160;				position: 270 @ 260;				color: Color lightGray;				borderWidth: 0.			self addMorph: drKnalltuetenContainer.			].		instructions removeFirst.			self show; refreshWorld.		"instructionShown := false.	]	ifFalse:	[instructionShown := true.]."! !!SAMViewInstructionStep methodsFor: 'accessing' stamp: 'CL 8/7/2009 17:29'!instructionShown	^instructionShown! !!SAMViewInstructionStep methodsFor: 'accessing' stamp: 'CL 8/7/2009 17:29'!instructionShown: anObject	instructionShown := anObject! !BitBlt subclass: #SAMViewObstacle	instanceVariableNames: 'kindOfObstacle orderOfObstacle x y'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMViewObstacle methodsFor: 'accessing' stamp: 'CL 8/6/2009 14:02'!initializeObstacle	^ self class destForm: Display			            sourceForm: ((Form fromFileNamed: 'gfx\obstacle.gif') replaceColor: Color white with: Color transparent)		               halftoneForm: nil	 	       	      combinationRule: Form blend	  	    		      destOrigin: 0@0	   	            sourceOrigin: 0@0	    		         extent: 800@768 	      	   		clipRect: Display computeBoundingBox! !!SAMViewObstacle methodsFor: 'accessing' stamp: 'CL 7/27/2009 15:05'!kindOfObstacle	^kindOfObstacle.! !!SAMViewObstacle methodsFor: 'accessing' stamp: 'CL 7/27/2009 15:06'!kindOfObstacle: wassup	kindOfObstacle := wassup.! !!SAMViewObstacle methodsFor: 'accessing' stamp: 'CL 7/27/2009 15:07'!orderOfObstacle	^orderOfObstacle.! !!SAMViewObstacle methodsFor: 'accessing' stamp: 'CL 8/4/2009 15:59'!orderOfObstacle: order	orderOfObstacle := order! !!SAMViewObstacle methodsFor: 'accessing' stamp: 'CL 8/4/2009 15:49'!x	^x! !!SAMViewObstacle methodsFor: 'accessing' stamp: 'CL 8/4/2009 15:49'!x: anObject	x := anObject! !!SAMViewObstacle methodsFor: 'accessing' stamp: 'CL 8/4/2009 15:49'!y	^y! !!SAMViewObstacle methodsFor: 'accessing' stamp: 'CL 8/4/2009 15:49'!y: anObject	y := anObject! !Object subclass: #SAMViewOperator	instanceVariableNames: 'leftVisualHint rightVisualHint modelData currentSound soundArray'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMViewOperator methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 20:34'!balanceLeft: shareLeft right: shareRight	<primitive: 'primitiveSoundSetLeftVolume' module: 'SoundPlugin'>! !!SAMViewOperator methodsFor: 'as yet unclassified' stamp: 'nn 8/31/2009 10:43'!initialize	super initialize .		modelData := SAMModelData getInstance .		currentSound := StreamingMP3Sound new.		soundArray := Array new: 8.		soundArray at: 1 put: (StreamingMP3Sound onFileNamed: 'audio\langsamer fahren.mp3');					at: 2 put: (StreamingMP3Sound onFileNamed: 'audio\schneller fahren.mp3');					at: 3 put: (StreamingMP3Sound onFileNamed: 'audio\links fahren.mp3');					at: 4 put: (StreamingMP3Sound onFileNamed: 'audio\rechts fahren.mp3');					at: 5 put: (StreamingMP3Sound onFileNamed: 'audio\kurven abkuerzen.mp3');					at: 6 put: (StreamingMP3Sound onFileNamed: 'audio\kurven genauer fahren.mp3');					at: 7 put: (StreamingMP3Sound onFileNamed: 'audio\fuehrung ueberlassen.mp3');					at: 8 put: (StreamingMP3Sound onFileNamed: 'audio\fuehrung uebernehmen.mp3').		leftVisualHint := (BitBlt destForm: Display		            sourceForm: nil	               halftoneForm: nil	               combinationRule: Form blend	               destOrigin: 0@0	               sourceOrigin: 0@0	               extent: 800@768 	               clipRect: Display computeBoundingBox).		rightVisualHint := (BitBlt destForm: Display		            sourceForm: nil	               halftoneForm: nil	               combinationRule: Form blend	               destOrigin: 0@0	               sourceOrigin: 0@0	               extent: 800@768 	               clipRect: Display computeBoundingBox).! !!SAMViewOperator methodsFor: 'as yet unclassified' stamp: 'nn 8/11/2009 22:42'!playAuditiveHints: index withBalance: audHintAllocation.	((currentSound samplesRemaining) > 0)	ifFalse:[		(audHintAllocation = 1)		ifTrue:[self balanceLeft: 1.0 right: 0.0.].				(audHintAllocation = 2)		ifTrue:[self balanceLeft: 0.0 right: 1.0.].				(audHintAllocation = 3)		ifTrue:[self balanceLeft: 1.0 right: 1.0.].				currentSound := soundArray at: index.		currentSound play .	].! !!SAMViewOperator methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 19:47'!showVisualHint	leftVisualHint sourceOrigin: -50 @ -314.	leftVisualHint copyBits.		rightVisualHint sourceOrigin: -660 @ -314.	rightVisualHint copyBits.! !!SAMViewOperator methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 20:01'!visualHintForm: pathToForm	leftVisualHint sourceForm: (Form fromFileNamed: pathToForm).	rightVisualHint sourceForm: (Form fromFileNamed: pathToForm).! !Object subclass: #SAMViewTrack	instanceVariableNames: 'track modelData obstacles controllerNetwork'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 13:51'!buildObstacles	| obstacleAsOrderedCollection trackHeight |	"this returns an orderedCollection, which holds a number of arrays (fixed size 2: 1:kind of obstacle; 2: y coordinate) - each representing an obstacle"	obstacleAsOrderedCollection := (modelData obstacleConfig) at: (modelData currentStep) .	trackHeight := modelData trackHeight .		obstacleAsOrderedCollection do: 	[		:arrayWithLengthTwo |				((arrayWithLengthTwo at: 1) = 1110)		ifTrue:		[			obstacles add: (((SAMViewObstacle new) initializeObstacle)									kindOfObstacle: 'static';									x: -418;									y: trackHeight - (arrayWithLengthTwo at: 2) - 131; 									orderOfObstacle: 2);							add: (((SAMViewObstacle new) initializeObstacle)									kindOfObstacle: 'static';									x: -328;									y: trackHeight - (arrayWithLengthTwo at: 2) - 406;									orderOfObstacle: 1).		].			((arrayWithLengthTwo at: 1) = 1111)		ifTrue:		[			obstacles add: (((SAMViewObstacle new) initializeObstacle)									kindOfObstacle: 'static';									x: -405;									y: trackHeight - (arrayWithLengthTwo at: 2) - 131; 									orderOfObstacle: 2);							add: (((SAMViewObstacle new) initializeObstacle)									kindOfObstacle: 'static';									x: -342;									y: trackHeight - (arrayWithLengthTwo at: 2) - 406;									orderOfObstacle: 1).		].			((arrayWithLengthTwo at: 1) = 111)		ifTrue:		[			obstacles add: (((SAMViewObstacle new) initializeObstacle)									kindOfObstacle: 'dynamic';									x: 0;									y: trackHeight - (arrayWithLengthTwo at: 2) - 930; 									orderOfObstacle: 1)		].	].		! !!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/21/2009 11:08'!buildTrack		| trackBMP |		"trackBMP := Form fromBMPFileNamed: 'gfx\bmp\tracks\testTrack_Qx.bmp'."	trackBMP := Form fromBMPFileNamed: 'gfx\bmp\tracks\', (modelData currentTrackFile) asString, '.bmp'.		modelData trackHeight: ((trackBMP height) - 800). "- 800 accounts for the offset caused by the shift into the visible area (coord (0,0) is the upp left point of the screen)"		track := (BitBlt destForm: Display 	                 sourceForm: trackBMP	                 halftoneForm: nil	                 combinationRule: Form over	                 destOrigin: 0@0	                 sourceOrigin: 0@0	                 extent: 800@768 	                 clipRect: Display computeBoundingBox).! !!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/4/2009 13:52'!colorCode	modelData colorCode: (((Display colorAt: 3 @ modelData yCoordinateTrackingObject) red * 2550.0) rounded / 10.0);			changed.! !!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/4/2009 11:22'!delete	track := nil.! !!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/5/2009 16:02'!deleteObstacle	obstacles do:	[		:obstacle |		(((obstacle y + modelData yCoordinateTrackingObject) < ((modelData totalStepDistance) + 30)) & ((obstacle y + modelData yCoordinateTrackingObject) > ((modelData totalStepDistance) - 30)))		ifTrue:[obstacles remove: obstacle.].	].! !!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/21/2009 11:07'!deleteTrack	track := nil.! !!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/5/2009 15:11'!initialize	modelData := SAMModelData getInstance .	modelData trackEnded: false.	obstacles := OrderedCollection new.						! !!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/19/2009 11:18'!moveObstacles	obstacles do:	[		:obstacle |		((modelData totalStepDistance - obstacle y) > 800.0)		ifTrue: [			obstacles remove: obstacle.			]		ifFalse:[			(obstacle kindOfObstacle = 'dynamic') & ((modelData totalStepDistance - obstacle y) > 0)			ifTrue:[				obstacle x: obstacle x - modelData dynamicObstacleDistanceTick.								(modelData network)				ifTrue:[controllerNetwork sendDynamicObstacleData: ((obstacle x) abs) asString.].				].			obstacle sourceOrigin: (obstacle x @ (obstacle y - modelData totalStepDistance)).			obstacle copyBits.		].	].! !!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/6/2009 10:14'!moveTrack		track sourceOrigin: (0 @ (modelData trackHeight - modelData totalStepDistance )).	track copyBits.! !!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/8/2009 13:53'!processTrackEditMWI	modelData trackEditMWIStaticObstacle: '0'.	modelData firstStaticObstacleXCoordinate: '0'.	modelData firstStaticObstacleYCoordinate: '0'.	modelData secondStaticObstacleXCoordinate: '0'.	modelData secondStaticObstacleYCoordinate: '0'.		modelData trackEditMWIDynamicObstacle: '0'.	modelData dynamicObstacleXCoordinate: '0'.	modelData dynamicObstacleYCoordinate: '0'. 	obstacles do:	[		:obst |		((modelData totalStepDistance - obst y) > 0.0)		ifTrue:[			(obst kindOfObstacle = 'static')			ifTrue: [				modelData trackEditMWIStaticObstacle: '1'.								(obst orderOfObstacle = 1)				ifTrue:[					modelData firstStaticObstacleXCoordinate: ((obst x) negated) asString.					modelData firstStaticObstacleYCoordinate: (modelData totalStepDistance - obst y) asString.					].								(obst orderOfObstacle = 2)				ifTrue:[					modelData secondStaticObstacleXCoordinate: ((obst x) negated) asString.					modelData secondStaticObstacleYCoordinate: (modelData totalStepDistance - obst y) asString.					].			].						(obst kindOfObstacle = 'dynamic')			ifTrue: [				modelData trackEditMWIDynamicObstacle: '1'.				modelData dynamicObstacleXCoordinate: ((obst x) negated) asString.				modelData dynamicObstacleYCoordinate: (modelData totalStepDistance - obst y) asString. 				].		].	].	modelData changed.! !!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/6/2009 10:18'!showCountdown	| countdownGraphic |	0 to: 3 do: 	[			:i |		countdownGraphic := (BitBlt destForm: Display 	                 sourceForm: (Form fromFileNamed: 'gfx\Countdown' , (3 - i) asString , '.gif')	                 halftoneForm: nil	                 combinationRule: Form blend	                 destOrigin: 0@0	                 sourceOrigin: 0@0	                 extent: 800@768 	                 clipRect: Display computeBoundingBox).						countdownGraphic sourceOrigin: (-300 @ -200).		countdownGraphic copyBits.			(Delay forSeconds: 1) wait.	].		! !!SAMViewTrack methodsFor: 'as yet unclassified' stamp: 'CL 8/6/2009 10:13'!showTrack		track sourceOrigin: (0 @ modelData trackHeight).	track copyBits.! !!SAMViewTrack methodsFor: 'accessing' stamp: 'nn 8/11/2009 20:27'!controllerNetwork	^controllerNetwork! !!SAMViewTrack methodsFor: 'accessing' stamp: 'nn 8/11/2009 20:27'!controllerNetwork: anObject	controllerNetwork := anObject! !Object subclass: #SAMViewTrackingObject	instanceVariableNames: 'speedometer offTrackColor obstacleColor modelData trackingObject speedoFrames speedoLeftHalfBlack localtrackingObjectGreen localtrackingObjectBlack speedoFramesGray speedoLeftHalfGray speedoRightHalfBlack trackingObjectLeftHalfGreen'	classVariableNames: ''	poolDictionaries: ''	category: 'ATEO-SAM'!!SAMViewTrackingObject methodsFor: 'as yet unclassified' stamp: 'CL 8/19/2009 14:50'!buildTrackingObject	| leftHalfGray leftHalfGreen leftHalfBlack rightHalfBlack |		localtrackingObjectGreen	:= Form fromFileNamed: 'gfx\trackingObject_green.png'.	localtrackingObjectBlack	:= Form fromFileNamed: 'gfx\trackingObject_black.png'.	leftHalfGreen 	:= Form fromFileNamed: 'gfx\trackingObject_leftHalf_green.png'.	leftHalfBlack 	:= Form fromFileNamed: 'gfx\trackingObject_leftHalf_black.png'.	rightHalfBlack	:= Form fromFileNamed: 'gfx\trackingObject_rightHalf_black.png'.	leftHalfGray	:= Form fromFileNamed: 'gfx\trackingObject_leftHalf_gray.png'.	speedoFrames := Array new: 360.	speedoFramesGray := Array new: 360.		"Something odd happens with the rotation here, I have to correct the position of all rotated forms by 7@7."	1 to: (speedoFrames size)  do: [:idx | speedoFrames at: idx put: (leftHalfBlack copy rotateBy: (idx - 1.0)). speedoFramesGray at: idx put: (leftHalfGray copy rotateBy: (idx - 1.0)).].				trackingObject := (BitBlt destForm: Display		            sourceForm: localtrackingObjectGreen	               halftoneForm: nil	               combinationRule: Form blend	               destOrigin: 0@0	               sourceOrigin: 0@0	               extent: 800@768 	               clipRect: Display computeBoundingBox).	trackingObjectLeftHalfGreen := (BitBlt destForm: Display		                sourceForm: leftHalfGreen	                   halftoneForm: nil	                   combinationRule: Form blend	                   destOrigin: 0@0	                   sourceOrigin: 0@0	                   extent: 800@768 	                   clipRect: Display computeBoundingBox).		speedoLeftHalfBlack := (BitBlt destForm: Display 		               sourceForm: leftHalfBlack	                  halftoneForm: nil	                  combinationRule: Form blend	                  destOrigin: 0@0	                  sourceOrigin: 0@0	                  extent: 800@768 	                  clipRect: Display computeBoundingBox).		speedoLeftHalfGray := (BitBlt destForm: Display 		               sourceForm: leftHalfGray	                  halftoneForm: nil	                  combinationRule: Form blend	                  destOrigin: 0@0	                  sourceOrigin: 0@0	                  extent: 800@768 	                  clipRect: Display computeBoundingBox).	speedoRightHalfBlack := (BitBlt destForm: Display		                   sourceForm: rightHalfBlack	                      halftoneForm: nil	                      combinationRule: Form blend	                      destOrigin: 0@0	                      sourceOrigin: 0@0	                      extent: 800@768 	                      clipRect: Display computeBoundingBox).! !!SAMViewTrackingObject methodsFor: 'as yet unclassified' stamp: 'CL 8/5/2009 14:25'!centerOfTrackingObject	^(((modelData totalCalculatedXAxisForBlitter) abs) @ (modelData yCoordinateTrackingObject)) + (15 @ 15).! !!SAMViewTrackingObject methodsFor: 'as yet unclassified' stamp: 'nn 8/11/2009 21:38'!initialize		super initialize.		modelData := SAMModelData getInstance .		offTrackColor := (Color r: 0.199 g: 0.599 b: 0.199).	obstacleColor := (Color r: 0.897 g: 0.372 b: 0.258) .		modelData yCoordinateTrackingObject: 715; changed.! !!SAMViewTrackingObject methodsFor: 'as yet unclassified' stamp: 'CL 8/19/2009 15:22'!moveTrackingObject	| formRotateErrorX formRotateErrorY angleDegrees totalCalculatedXAxisForBlitter|	formRotateErrorX := 7.	formRotateErrorY := 7.		totalCalculatedXAxisForBlitter := modelData totalCalculatedXAxisForBlitter.		angleDegrees := ((360.0 / (modelData maxSpeed)) * modelData speedometer ) ceiling.			(angleDegrees = 0)	ifTrue:[		trackingObject sourceForm: localtrackingObjectGreen.		trackingObject sourceOrigin: (totalCalculatedXAxisForBlitter @ (modelData yCoordinateTrackingObject) negated).		trackingObject copyBits.		].		(angleDegrees = 360)	ifTrue:[		trackingObject sourceForm: localtrackingObjectBlack.		trackingObject sourceOrigin: (totalCalculatedXAxisForBlitter @ (modelData yCoordinateTrackingObject) negated).		trackingObject copyBits.		].		((angleDegrees > 0) & (angleDegrees < 360))	ifTrue:[		trackingObject sourceForm: localtrackingObjectGreen.		trackingObject sourceOrigin: (totalCalculatedXAxisForBlitter @ (modelData yCoordinateTrackingObject) negated).		trackingObject copyBits.				speedoLeftHalfBlack sourceForm: (speedoFrames at: angleDegrees).		speedoLeftHalfBlack sourceOrigin: (totalCalculatedXAxisForBlitter + formRotateErrorX) @ (formRotateErrorY - (modelData yCoordinateTrackingObject)).		speedoLeftHalfBlack copyBits.					"speedometer"		(angleDegrees <= 180)		ifTrue: [			trackingObjectLeftHalfGreen  sourceOrigin: (totalCalculatedXAxisForBlitter @ (modelData yCoordinateTrackingObject) negated).			trackingObjectLeftHalfGreen copyBits.		] ifFalse: [			speedoRightHalfBlack sourceOrigin: (totalCalculatedXAxisForBlitter @ (modelData yCoordinateTrackingObject) negated).			speedoRightHalfBlack copyBits.		].	].	(angleDegrees > 360)	ifTrue:[		trackingObject sourceForm: localtrackingObjectBlack.		trackingObject sourceOrigin: (totalCalculatedXAxisForBlitter @ (modelData yCoordinateTrackingObject) negated).		trackingObject copyBits.				speedoLeftHalfGray sourceForm: (speedoFramesGray at: (angleDegrees - 360)).		speedoLeftHalfGray sourceOrigin: (totalCalculatedXAxisForBlitter + formRotateErrorX) @ (formRotateErrorY - (modelData yCoordinateTrackingObject)).		speedoLeftHalfGray copyBits.				speedoLeftHalfBlack sourceForm: (speedoFrames at: 360).		speedoLeftHalfBlack sourceOrigin: (totalCalculatedXAxisForBlitter + formRotateErrorX) @ (formRotateErrorY - (modelData yCoordinateTrackingObject)).		speedoLeftHalfBlack copyBits.	].! !!SAMViewTrackingObject methodsFor: 'as yet unclassified' stamp: 'CL 8/5/2009 17:47'!penaltyForCollision	| sensor1 sensor7 sensor3 |	sensor1 := Display colorAt: (self centerOfTrackingObject + (0 @ -17)) .	sensor3 := Display colorAt: (self centerOfTrackingObject + (17 @ 0)) .	sensor7 := Display colorAt: (self centerOfTrackingObject + (-17 @ 0)) .		[(sensor1 = offTrackColor) & (sensor7 = offTrackColor) & (sensor3 = offTrackColor)]	whileFalse:	[		modelData totalCalculatedXAxisForBlitter: modelData totalCalculatedXAxisForBlitter + 0.1; changed.						sensor1 := Display colorAt: (self centerOfTrackingObject + (0 @ -17)) .		sensor3 := Display colorAt: (self centerOfTrackingObject + (17 @ 0)) .		sensor7 := Display colorAt: (self centerOfTrackingObject + (-17 @ 0)) .	].! !!SAMViewTrackingObject methodsFor: 'as yet unclassified' stamp: 'CL 8/5/2009 14:28'!processSensors	|noSensorsOffTrack collisionAtSensor sensor1 sensor2 sensor3 sensor4 sensor5 sensor6 sensor7 sensor8 centerOfTrackingObject |	noSensorsOffTrack := 0.	collisionAtSensor := ''.		centerOfTrackingObject := self centerOfTrackingObject.		"Transcript show: 'centerPositionTrackingObject: ', centerPositionTrackingObject asString, ' totalCalculatedXAxis:', totalCalculatedXAxis asString; cr."	"sensor1 is 12 o'clock, the rest clockwise"	sensor1 := Display colorAt: (centerOfTrackingObject  + (0 @ -17)) .	sensor2 := Display colorAt: (centerOfTrackingObject + (12 @ -12)) .	sensor3 := Display colorAt: (centerOfTrackingObject + (17 @ 0)) .	sensor4 := Display colorAt: (centerOfTrackingObject + (12 @ 12)) .	sensor5 := Display colorAt: (centerOfTrackingObject + (0 @ 17)) .	sensor6 := Display colorAt: (centerOfTrackingObject + (-12 @ 12)) .	sensor7 := Display colorAt: (centerOfTrackingObject + (-17 @ 0)) .	sensor8 := Display colorAt: (centerOfTrackingObject + (-12 @ -12)) .		(sensor1 = offTrackColor) ifTrue:[noSensorsOffTrack := noSensorsOffTrack + 1.].	(sensor2 = offTrackColor) ifTrue:[noSensorsOffTrack := noSensorsOffTrack + 1.].	(sensor3 = offTrackColor) ifTrue:[noSensorsOffTrack := noSensorsOffTrack + 1.].	(sensor4 = offTrackColor) ifTrue:[noSensorsOffTrack := noSensorsOffTrack + 1.].	(sensor5 = offTrackColor) ifTrue:[noSensorsOffTrack := noSensorsOffTrack + 1.].	(sensor6 = offTrackColor) ifTrue:[noSensorsOffTrack := noSensorsOffTrack + 1.].	(sensor7 = offTrackColor) ifTrue:[noSensorsOffTrack := noSensorsOffTrack + 1.].	(sensor8 = offTrackColor) ifTrue:[noSensorsOffTrack := noSensorsOffTrack + 1.].		(sensor1 = obstacleColor) ifTrue:[collisionAtSensor := '1,'.].	(sensor2 = obstacleColor) ifTrue:[collisionAtSensor := collisionAtSensor, '2,'.].	(sensor3 = obstacleColor) ifTrue:[collisionAtSensor := collisionAtSensor, '3,'.].	(sensor4 = obstacleColor) ifTrue:[collisionAtSensor := collisionAtSensor, '4,'.].	(sensor5 = obstacleColor) ifTrue:[collisionAtSensor := collisionAtSensor, '5,'.].	(sensor6 = obstacleColor) ifTrue:[collisionAtSensor := collisionAtSensor, '6,'.].	(sensor7 = obstacleColor) ifTrue:[collisionAtSensor := collisionAtSensor, '7,'.].	(sensor8 = obstacleColor) ifTrue:[collisionAtSensor := collisionAtSensor, '8,'.].		(collisionAtSensor size > 0)	ifTrue:[modelData collisionInTick: true. ]	ifFalse:[modelData collisionInTick: false. ].		(collisionAtSensor = '')	ifTrue:[collisionAtSensor := '0'.].		modelData noSensorsOffTrack: noSensorsOffTrack;					collisionAtSensor: collisionAtSensor;					changed.		"(sensor1 ~= offTrackColor)	ifTrue:[	Transcript show: 'sensor1: ', sensor1 asString; cr.	Transcript show: 'sensor2: ', sensor2 asString; cr.	Transcript show: 'sensor3: ', sensor3 asString; cr.	Transcript show: 'sensor4: ', sensor4 asString; cr.	Transcript show: 'sensor5: ', sensor5 asString; cr.	Transcript show: 'sensor6: ', sensor6 asString; cr.	Transcript show: 'sensor7: ', sensor7 asString; cr.	Transcript show: 'sensor8: ', sensor8 asString; cr.	Transcript show: '---------------------'; cr.	]."	"Transcript show: 'Display colorAt: (', centerPositionTrackingObject asString, ' + (-12 @ 12)): ', (Display colorAt: (centerPositionTrackingObject + (-12 @ 12))) asString; cr."	"Transcript show: 'collisionAtSensor: ', collisionAtSensor asString, ' noSensorsOffTrack: ', noSensorsOffTrack asString; cr."				! !